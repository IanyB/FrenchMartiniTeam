using System;
using System.Data;
using System.IO;
using System.Linq;
using ICSharpCode.SharpZipLib.Core;
using ICSharpCode.SharpZipLib.Zip;
using System.Data.OleDb;

namespace ExcelExportFiles
{
    public class Export
    {
        public void ReadExcelFiles()
        {
            OleDbConnection db = new OleDbConnection(@"Provider=Microsoft.Jet.OLEDB.4.0;" +
            @"Data Source=Bourgas-Plaza-Sales-Report-20-Jul-2013.xls;Extended Properties=""Excel 8.0;HDR=Yes;ReadOnly=False;""");
            OleDbCommand cmdExcel = new OleDbCommand();
            OleDbDataAdapter da = new OleDbDataAdapter();

            db.Open();
            DataTable dtExcelSchema;
            dtExcelSchema = db.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
            db.Close();

            DataSet ds = new DataSet();
            string sheetName = dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();
            cmdExcel.CommandText = "SELECT ProductID, Name From [" + sheetName + "]";
            da.SelectCommand=cmdExcel;
            da.Fill(ds);

            //db.Open();

            
            //OleDbCommand selectRows = new OleDbCommand("select * from [Sales$]", db);
            //OleDbDataReader reader = selectRows.ExecuteReader();

            //while (reader.Read())
            //{
            //    int id = (int)reader["ProductID"];
            //    int quantity = (int)reader["Quantity"];
            //    double price = (double)reader["Unit Price"];
            //    double sum = (double)reader["Sum"];
            //    Console.WriteLine("{0} {1} {2} {3}", id, quantity, price, sum);
            //}

            //db.Close();

        }

        public void MyExtract(string archiveFileNameIn, string outFolder)
        {
            ZipFile zf = null;
            try
            {
                FileStream fs = File.OpenRead(archiveFileNameIn);
                zf = new ZipFile(fs);
                foreach (ZipEntry zipEntry in zf)
                {
                    if (!zipEntry.IsFile)
                    {
                        continue;           // Ignore directories
                    }

                    String entryFileName = zipEntry.Name;
                    // to remove the folder from the entry:- entryFileName = Path.GetFileName(entryFileName);
                    // Optionally match entrynames against a selection list here to skip as desired.
                    // The unpacked length is available in the zipEntry.Size property.

                    byte[] buffer = new byte[4096];     // 4K is optimum
                    Stream zipStream = zf.GetInputStream(zipEntry);

                    // Manipulate the output filename here as desired.
                    String fullZipToPath = Path.Combine(outFolder, entryFileName);
                    string directoryName = Path.GetDirectoryName(fullZipToPath);
                    if (directoryName.Length > 0)
                    {
                        Directory.CreateDirectory(directoryName);
                    }

                    // Unzip file in buffered chunks. This is just as fast as unpacking to a buffer the full size
                    // of the file, but does not waste memory.
                    // The "using" will close the stream even if an exception occurs.
                    using (FileStream streamWriter = File.Create(fullZipToPath))
                    {
                        StreamUtils.Copy(zipStream, streamWriter, buffer);
                    }
                }
            }
            finally
            {
                if (zf != null)
                {
                    zf.IsStreamOwner = true; // Makes close also shut the underlying stream
                    zf.Close(); // Ensure we release resources
                }

            }
        }
    }
}